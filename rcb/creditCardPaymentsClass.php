<?php
/**
 * Created by PhpStorm.
 * User: m.ermogenous
 * Date: 23/04/2020
 * Time: 22:08
 */

class creditCardPaymentsClass
{
    //rcb data
    private $RCBMerchant = '99000013';
    private $encryptionKey = '123456';

    private $creditCardNumber = '';
    private $creditCardExpiryYear = '';
    private $creditCardExpiryMonth = '';
    private $creditCardCCV = '';
    private $paymentAmount = 0;
    private $paymentDescription = '';
    private $paymentForeignIdentifier = '';
    private $paymentStatus = '';

    private $creditCardData;
    private $cardID = 0; //this holds the credit card ID in table rcb_credit_cards

    public $error = false;
    public $errorDescription = '';

    private $tokenID = '';
    private $paymentID = 0;
    private $sessionID = '';//The session that is being generated by getSession()
    private $orderIDFromGetSession = '';//generated by getSession() and needed in execute payment
    private $getSessionStatus = '';//the result of the getSession()

    function __construct($cardID = 0)
    {
        global $db;
        if ($cardID != 0) {
            $this->cardID = $cardID;
        }
        if ($this->cardID != 0) {
            $this->creditCardData = $db->query_fetch('SELECT * FROM rcb_credit_cards WHERE rcbcrc_credit_card_ID = ' . $this->cardID);
            $this->tokenID = $this->creditCardData['rcbcrc_token'];
            $this->setCreditCardNumber($this->creditCardData['rcbcrc_credit_card_number']);
            $this->setCreditCardExpiryYear($this->creditCardData['rcbcrc_expiry_year']);
            $this->setCreditCardExpiryMonth($this->creditCardData['rcbcrc_expiry_month']);
            $this->setCreditCardCCV($this->creditCardData['rcbcrc_ccv']);
        }
    }

    /** Creates new credit card entry in db using card details. When first payment is executed then the credit card details are replaced with token
     * @param $cardNumber
     * @param $expiryYear
     * @param $expiryMonth
     * @param $ccv
     * @return int|string
     */
    public function createNewCard()
    {
        global $db;

        if ($this->creditCardNumber == '') {
            $this->error = true;
            $this->errorDescription = 'Must provide credit cardNumber';
        }
        if ($this->creditCardExpiryYear == '') {
            $this->error = true;
            $this->errorDescription = 'Must provide credit card expiry year';
        }
        if ($this->creditCardExpiryMonth == '') {
            $this->error = true;
            $this->errorDescription = 'Must provide credit card expiry month';
        }
        if ($this->creditCardCCV == '') {
            $this->error = true;
            $this->errorDescription = 'Must provide credit card ccv';
        }
        if ($this->error == true) {
            //return false;
        }

        $newData['credit_card_number'] = $this->creditCardNumber;
        $newData['expiry_year'] = $this->creditCardExpiryYear;
        $newData['expiry_month'] = $this->creditCardExpiryMonth;
        $newData['ccv'] = $this->creditCardCCV;

        $this->cardID = $db->db_tool_insert_row('rcb_credit_cards', $newData, '', 1, 'rcbcrc_');
        $this->__construct();
        return $this;
    }

    /** Creates new payment in the db table rdb_credit_card_payments
     * @return bool
     */
    public function createNewPayment()
    {
        global $db;
        if ($this->cardID == 0) {
            $this->error = true;
            $this->errorDescription = '(createNewPayment)Must provide cardID';
        }
        if ($this->paymentAmount == 0) {
            $this->error = true;
            $this->errorDescription = '(createNewPayment)Must provide payment amount';
        }
        if ($this->error == true) {
            return false;
        }

        $newData['credit_card_ID'] = $this->cardID;
        $newData['status'] = 'Outstanding';
        $newData['session_status'] = 'Outstanding';
        $newData['amount'] = $this->paymentAmount;
        $newData['description'] = $this->paymentDescription;
        $newData['foreign_identifier'] = $this->paymentForeignIdentifier;

        $this->paymentID = $db->db_tool_insert_row('rcb_credit_card_payments', $newData, '', 1, 'rcbcrp_');
        $this->setPaymentID($this->paymentID);

        //return $this;
    }

    public function executePayment()
    {
        global $db;
        if ($this->paymentID == 0) {
            $this->error = true;
            $this->errorDescription = '(executePayment) Must provide payment ID';
            return false;
        }

        if ($this->paymentStatus != 'Outstanding'){
            $this->error = true;
            $this->errorDescription = '(executePayment) Payment status is not outstanding.';
            return false;
        }

        if ($this->cardID == 0){
            $this->error = true;
            $this->errorDescription = '(executePayment) Credit Card ID is not defined.';
            return false;
        }

        //fix payment amount
        $this->fixPaymentAmount();

        //first execute getSession()
        $this->getSession();
        if ($this->error == true) {
            return false;
        }
        //echo "Get Session OK<br>";

        if ($this->tokenID == '') {
            return $this->executePaymentCreditCardNumber();
        } else {
            return $this->executePaymentToken();
        }

    }

    private function executePaymentCreditCardNumber()
    {
        global $db;
        if ($this->sessionID == ''){
            $this->error = true;
            $this->errorDescription = '(executePaymentCreditCardNumber) Session id is not defined';
        }
        if ($this->orderIDFromGetSession == ''){
            $this->error = true;
            $this->errorDescription = '(executePaymentCreditCardNumber) Order ID from getSession is not defined';
        }
        if ($this->error == true){
            return false;
        }

        $xml = '<?xml version="1.0" encoding="UTF-8"?>
<TKKPG>
    <Request>
        <Operation>Purchase</Operation>
        <Order>
            <Merchant>'.$this->RCBMerchant.'</Merchant>
            <OrderID>'.$this->orderIDFromGetSession.'</OrderID>
            <AddParams>
            
            </AddParams>
        </Order>
        <SessionID>'.$this->sessionID.'</SessionID>
        <Amount>'.$this->paymentAmount.'</Amount>
        <Currency>978</Currency>
        <PAN>'.($db->decrypt($this->creditCardNumber,$this->encryptionKey)).'</PAN>
        <ExpDate>'.$this->creditCardExpiryYear.$this->creditCardExpiryMonth.'</ExpDate>
        <DraftCaptureFlag></DraftCaptureFlag>
        <CVV2></CVV2>
        <!-- TWEC indicator code -->
        <eci>08</eci>
        <IP></IP>
    </Request>
</TKKPG> ';

        //The URL that you want to send your XML to.
        $url = 'https://mpi.rcbcy.com:9774/Exec';
        //Initiate cURL
        $curl = curl_init($url);
        //Set the Content-Type to text/xml.
        curl_setopt($curl, CURLOPT_HTTPHEADER, array("Content-Type: text/xml"));
        //Set CURLOPT_POST to true to send a POST request.
        curl_setopt($curl, CURLOPT_POST, true);
        //Attach the XML string to the body of our request.
        curl_setopt($curl, CURLOPT_POSTFIELDS, $xml);
        //Tell cURL that we want the response to be returned as
        //a string instead of being dumped to the output.
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        //Execute the POST request and send our XML.
        $result = curl_exec($curl);
        $resultXML = simplexml_load_string($result);
        //Do some basic error checking.
        if (curl_errno($curl)) {
            throw new Exception(curl_error($curl));
        }
        //Close the cURL handle.
        curl_close($curl);
        //echo $xml;
        //print_r($resultXML);
        //echo PHP_EOL.PHP_EOL;
        $paymentReturnString = print_r($resultXML,true);
        $updateData['payment_return_string'] = $paymentReturnString;

        $paymentStatus = $resultXML->XMLOut->Message->OrderStatus;
        $updateData['status'] = $paymentStatus;
        if ($updateData['status'] == ''){
            $updateData['status'] = $resultXML->Response->Status;
            if ($updateData['status'] == ''){
                $updateData['status'] = 'ERROR';
            }
        }
        $db->db_tool_update_row('rcb_credit_card_payments', $updateData,
            'rcbcrp_credit_card_payment_ID = '.$this->paymentID, $this->paymentID,'',
            'execute','rcbcrp_');

        $tokenSplit = explode('=',$resultXML->XMLOut->Message->Response_g);
        //$creditCardNewData['token'] = $tokenSplit[0];
        //$creditCardNewData['fld_expiration'] = $tokenSplit[1];
        $this->updateCreditCardWithToken($tokenSplit[0]);

        //echo "Updating token with".$creditCardNewData['token']."<br>";
        if ($paymentStatus == 'APPROVED'){
            return true;
        }
        else {
            $this->error = true;
            $this->errorDescription = 'Purchase was '.$paymentStatus;
            return false;
        }
    }

    private function executePaymentToken()
    {
        global $db;
        if ($this->tokenID == ''){
            $this->error = true;
            $this->errorDescription = '(executePaymentToken) No token defined';
            return false;
        }

        $xml = '<?xml version="1.0" encoding="UTF-8"?>
                <TKKPG>
                <Request>
                <Operation>Purchase</Operation>
                <Order>
                <Merchant>'.$this->RCBMerchant.'</Merchant>
                <OrderID>'.$this->orderIDFromGetSession.'</OrderID>
                <AddParams>
                <FA-DATA>Email=user@yandex.ru; Phone=22211444;ShippingCountry=156; ShippingCity=X City;DeliveryPeriod=32;MerchantOrderID=E643C1426056;</FA-DATA>
                </AddParams>
                </Order>
                <SessionID>'.$this->sessionID.'</SessionID>
                <Amount>'.$this->paymentAmount.'</Amount>
                <Currency>978</Currency>
                <CardUID>'.$this->tokenID.'</CardUID>
                <CVV2></CVV2>
                <!-- TWEC indicator code -->
                <eci>08</eci>
                <IP></IP>
                </Request>
                </TKKPG>';

        //The URL that you want to send your XML to.
        $url = 'https://mpi.rcbcy.com:9774/Exec';
        //Initiate cURL
        $curl = curl_init($url);
        //Set the Content-Type to text/xml.
        curl_setopt($curl, CURLOPT_HTTPHEADER, array("Content-Type: text/xml"));
        //Set CURLOPT_POST to true to send a POST request.
        curl_setopt($curl, CURLOPT_POST, true);
        //Attach the XML string to the body of our request.
        curl_setopt($curl, CURLOPT_POSTFIELDS, $xml);
        //Tell cURL that we want the response to be returned as
        //a string instead of being dumped to the output.
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        //Execute the POST request and send our XML.
        $result = curl_exec($curl);
        $resultXML = simplexml_load_string($result);
        //Do some basic error checking.
        if (curl_errno($curl)) {
            throw new Exception(curl_error($curl));
        }
        //Close the cURL handle.
        curl_close($curl);

        $paymentReturnString = print_r($resultXML,true);
        $updateData['payment_return_string'] = $paymentReturnString;

        $paymentStatus = $resultXML->Response->Status;
        $updateData['status'] = $paymentStatus;
        if ($updateData['status'] == ''){
            $updateData['status'] = $resultXML->Response->Status;
            if ($updateData['status'] == ''){
                $updateData['status'] = 'ERROR';
            }
        }
        $db->db_tool_update_row('rcb_credit_card_payments', $updateData,
            'rcbcrp_credit_card_payment_ID = '.$this->paymentID, $this->paymentID,'',
            'execute','rcbcrp_');

        //$tokenNewData['fld_token'] = $resultXML->XMLOut->Message->Response_g;
        //$db->db_tool_update_row('rcb_token_list', $tokenNewData, 'rcbtl_token_list_ID = '.$this->tokenListID, $this->tokenListID,'fld_','execute','rcbtl_');
        //echo "Updating token list with ID ".$this->tokenListID." with token: ".$tokenNewData['fld_token'];
        if ($paymentStatus == 'APPROVED'){
            return true;
        }
        else {

            $this->error = true;
            $this->errorDescription = 'Purchase was '.$paymentStatus;
            return false;
        }
    }

    private function updateCreditCardWithToken($token){
        global $db;

        if ($token == ''){
            $this->error = true;
            $this->errorDescription = '(updateCreditCardWithToken) Token was empty';
            return false;
        }
        $newData['token'] = $token;
        $cardNumber = $db->decrypt($this->creditCardNumber,$this->encryptionKey);
        $newData['credit_card_number'] = substr($cardNumber,0,4)."********"
            .substr($cardNumber,12);
        $newData['expiry_year'] = '';
        $newData['expiry_month'] = '';
        $newData['ccv'] = '';

        $db->db_tool_update_row('rcb_credit_cards', $newData,
            'rcbcrc_credit_card_ID = ' . $this->cardID, $this->cardID, '',
            'execute', 'rcbcrc_');
    }

    /** Before executing any payment must create a session to get the sessionID
     * @return bool
     * @throws Exception
     */
    private function getSession()
    {
        global $db;

        if ($this->paymentAmount == 0) {
            $this->error = true;
            $this->errorDescription = '(getSession)Must supply purchase amount';
            return false;
        }

        $xml = '<?xml version="1.0" encoding="UTF-8"?>
                <TKKPG>
                <Request>
                <Operation>CreateOrder</Operation>
                <Language>EN</Language>
                <Order>
                <OrderType>Purchase</OrderType>
                <Merchant>' . $this->RCBMerchant . '</Merchant>
                <Amount>' . $this->paymentAmount . '</Amount>
                <Currency>978</Currency>
                <Description>Test1</Description>
                <ApproveURL>http://agents.agentscy.com/rcb/respond/response_approve.php?ID=' . $this->paymentID . '</ApproveURL>
                <CancelURL>http://agents.agentscy.com/rcb/respond/response_cancel.php?ID=' . $this->paymentID . '</CancelURL>
                <DeclineURL>http://agents.agentscy.com/rcb/respond/response_decline.php?ID=' . $this->paymentID . '</DeclineURL>
                <AddParams>
                <FA-DATA>Email=user@yandex.ru; Phone=22211444;ShippingCountry=156; ShippingCity=X City;DeliveryPeriod=32;MerchantOrderID=E643C1426056;</FA-DATA>
                </AddParams>
                </Order>
                </Request>
                </TKKPG>';
        //echo $xml;
        //The URL that you want to send your XML to.
        $url = 'https://mpi.rcbcy.com:9774/Exec';
        //Initiate cURL
        $curl = curl_init($url);
        //Set the Content-Type to text/xml.
        curl_setopt($curl, CURLOPT_HTTPHEADER, array("Content-Type: text/xml"));
        //Set CURLOPT_POST to true to send a POST request.
        curl_setopt($curl, CURLOPT_POST, true);
        //Attach the XML string to the body of our request.
        curl_setopt($curl, CURLOPT_POSTFIELDS, $xml);
        //Tell cURL that we want the response to be returned as
        //a string instead of being dumped to the output.
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        //Execute the POST request and send our XML.
        $result = curl_exec($curl);
        $resultXML = simplexml_load_string($result);
        //Do some basic error checking.
        if (curl_errno($curl)) {
            throw new Exception(curl_error($curl));
        }
        //Close the cURL handle.
        curl_close($curl);
        //print_r($resultXML);

        $this->sessionID = $resultXML->Response->Order->SessionID;
        $this->getSessionStatus = $resultXML->Response->Status;
        $this->orderIDFromGetSession = $resultXML->Response->Order->OrderID;

        //00 -> successfully
        if ($resultXML->Response->Status == '00') {
            $newData['session_status'] = 'Success';
        } //30 -> message invalid format (no mandatory fields etc.)
        else if ($resultXML->Response->Status == '30') {
            $newData['session_status'] = 'InvalidFormat';
        } //10->the Merchant has no access to the CreateOrder operation (or the Merchant is not registered)
        else if ($resultXML->Response->Status == '10') {
            $newData['session_status'] = 'NoAccess';
        } else {
            $newData['session_status'] = 'ErrorOther';
        }

        $newData['transaction_date_time'] = date('Y-m-d G:i:s');
        $newData['session'] = $this->sessionID;
        $db->db_tool_update_row('rcb_credit_card_payments', $newData, 'rcbcrp_credit_card_payment_ID = ' . $this->paymentID,
            $this->paymentID, '', 'execute', 'rcbcrp_');

        if ($this->getSessionStatus != '00') {
            $this->error = true;
            $this->errorDescription = 'Order status was not successful.';
            return false;
        }

        return true;
    }

    private function fixPaymentAmount(){
        $parts = explode('.',$this->paymentAmount);
        $this->paymentAmount = $parts[0].$parts[1];
    }

    //SETTERS***********************************************************************************************************************************************

    /**
     * @param string $creditCardNumber
     * @return $this
     */
    public function setCreditCardNumber($creditCardNumber)
    {
        global $db;
        $this->creditCardNumber = $creditCardNumber;
        return $this;
    }

    /**
     * @param string $creditCardExpiryYear
     * @return $this
     */
    public function setCreditCardExpiryYear($creditCardExpiryYear)
    {
        $this->creditCardExpiryYear = $creditCardExpiryYear;
        return $this;
    }

    /**
     * @param string $creditCardExpiryMonth
     * @return $this
     */
    public function setCreditCardExpiryMonth($creditCardExpiryMonth)
    {
        $month = $creditCardExpiryMonth * 1;
        if ($month < 10){
            $month = '0'.$month;
        }
        $this->creditCardExpiryMonth = $month;
        return $this;
    }

    /**
     * @param string $creditCardCCV
     * @return $this
     */
    public function setCreditCardCCV($creditCardCCV)
    {
        $this->creditCardCCV = $creditCardCCV;
        return $this;
    }

    /**
     * @param int $paymentAmount
     * @return $this
     */
    public function setPaymentAmount($paymentAmount)
    {
        $this->paymentAmount = $paymentAmount;
        return $this;
    }

    /**
     * @param string $paymentDescription
     * @return $this
     */
    public function setPaymentDescription($paymentDescription)
    {
        $this->paymentDescription = $paymentDescription;
        return $this;
    }

    /**
     * @param string $paymentForeignIdentifier
     * @return $this
     */
    public function setPaymentForeignIdentifier($paymentForeignIdentifier)
    {
        $this->paymentForeignIdentifier = $paymentForeignIdentifier;
        return $this;
    }

    /**
     * @param int $paymentID
     * @return $this
     */
    public function setPaymentID($paymentID)
    {
        global $db;
        $this->paymentID = $paymentID;
        $paymentData = $db->query_fetch('
            SELECT * FROM
            rcb_credit_card_payments 
            JOIN rcb_credit_cards ON rcbcrp_credit_card_ID = rcbcrc_credit_card_ID
            WHERE rcbcrp_credit_card_payment_ID = ' . $paymentID);
        $this->cardID = $paymentData['rcbcrc_credit_card_ID'];
        $this->creditCardData = $paymentData;
        $this->setCreditCardNumber($this->creditCardData['rcbcrc_credit_card_number']);
        $this->setCreditCardExpiryYear($this->creditCardData['rcbcrc_expiry_year']);
        $this->setCreditCardExpiryMonth($this->creditCardData['rcbcrc_expiry_month']);
        $this->setCreditCardCCV($this->creditCardData['rcbcrc_ccv']);
        $this->paymentAmount = $paymentData['rcbcrp_amount'];
        $this->paymentDescription = $paymentData['rcbcrp_description'];
        $this->paymentForeignIdentifier = $paymentData['rcbcrp_foreign_identifier'];
        $this->paymentStatus = $paymentData['rcbcrp_status'];
        return $this;
    }

    /**
     * @param int $cardID
     * @return $this
     */
    public function setCardID($cardID)
    {
        $this->cardID = $cardID;
        $this->__construct();
        return $this;
    }


    //GETTERS**********************************************************************************************************************************

    /**
     * @return int
     */
    public function getCardID()
    {
        return $this->cardID;
    }

    /**
     * @return string
     */
    public function getGetOrderStatus()
    {
        return $this->getOrderStatus;
    }


}